[{"/home/shimai/workspace/text_alive_app/src/index.js":"1","/home/shimai/workspace/text_alive_app/src/App.js":"2","/home/shimai/workspace/text_alive_app/src/reportWebVitals.js":"3","/home/shimai/workspace/text_alive_app/src/Card.js":"4","/home/shimai/workspace/text_alive_app/src/BlackCurtain.js":"5"},{"size":500,"mtime":1609674635251,"results":"6","hashOfConfig":"7"},{"size":8102,"mtime":1609988325608,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1609247700900,"results":"9","hashOfConfig":"7"},{"size":2879,"mtime":1609942071244,"results":"10","hashOfConfig":"7"},{"size":919,"mtime":1609941461374,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"wjea5c",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/shimai/workspace/text_alive_app/src/index.js",[],["25","26"],"/home/shimai/workspace/text_alive_app/src/App.js",["27","28","29","30"],"/home/shimai/workspace/text_alive_app/src/reportWebVitals.js",[],"/home/shimai/workspace/text_alive_app/src/Card.js",["31"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport styled from 'styled-components';\nimport { Card, CardContent, IconButton, Typography, Divider } from '@material-ui/core';\n// import SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport StopIcon from '@material-ui/icons/Stop';\n// import SkipNextIcon from '@material-ui/icons/SkipNext';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: 'fixed',\n    display: 'flex',\n    display: 'inline-block',\n    opacity: 0.9,\n    marginTop: 10,\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  content: {\n    flex: '1 0 auto',\n    color: '#fff',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    padding: '24px 16px',\n  },\n  controls: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n}));\n\nexport const Meta = styled(CardContent)`\n`;\n\nconst MediaControlCard = (props) => {\n  const classes = useStyles();\n  // const theme = useTheme();\n  const { title, artist, isPlayingVideo, requestPlay, requestPause, requestStop } = props;\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details} style={{ backgroundColor: '#000c', height: 50 }}>\n        <div className={classes.controls}>\n          {/* <IconButton aria-label=\"previous\">\n            {theme.direction === 'rtl' ? <SkipNextIcon /> : <SkipPreviousIcon />}\n          </IconButton> */}\n          <IconButton aria-label=\"play/pause\">\n            { !isPlayingVideo ? (\n              <PlayArrowIcon fontSize=\"small\" style={{ color: '#fff' }} onClick={() => requestPlay()} />\n            ) : (\n              <PauseIcon fontSize=\"small\" style={{ color: '#fff' }} onClick={() => requestPause()} />\n            )}\n          </IconButton>\n          <IconButton aria-label=\"stop\">\n            <StopIcon fontSize=\"small\" style={{ color: '#fff' }} onClick={() => requestStop()} />\n          </IconButton>\n          {/* <IconButton aria-label=\"next\">\n            {theme.direction === 'rtl' ? <SkipPreviousIcon /> : <SkipNextIcon />}\n          </IconButton> */}\n          <Divider flexItem orientation='vertical' style={{ marginTop:5, backgroundColor:'#fff' }} />\n        </div>\n        <Meta className={classes.content}>\n          <Typography style={{ fontSize: 12, }} >\n            Title: { title ? title : '-' }\n          </Typography>\n          <Typography style={{ fontSize: 12, }} >\n            Artist: { artist ? artist : '-' }\n          </Typography>\n        </Meta>\n      </div>\n      {/* <CardMedia\n        className={classes.cover}\n        image=\"/static/images/cards/live-from-space.jpg\"\n        title=\"Live from space album cover\"\n      /> */}\n    </Card>\n  );\n}\n\nexport default MediaControlCard;\n","/home/shimai/workspace/text_alive_app/src/BlackCurtain.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":52,"column":10,"nodeType":"40","messageId":"41","endLine":52,"endColumn":13},{"ruleId":"38","severity":1,"message":"42","line":52,"column":15,"nodeType":"40","messageId":"41","endLine":52,"endColumn":21},{"ruleId":"43","severity":1,"message":"44","line":123,"column":15,"nodeType":"40","endLine":123,"endColumn":19},{"ruleId":"43","severity":1,"message":"45","line":140,"column":17,"nodeType":"40","endLine":140,"endColumn":28},{"ruleId":"46","severity":1,"message":"47","line":15,"column":5,"nodeType":"48","messageId":"49","endLine":15,"endColumn":12},{"ruleId":"34","replacedBy":"50"},{"ruleId":"36","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'app' is assigned a value but never used.","Identifier","unusedVar","'setApp' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'b' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'c' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","no-dupe-keys","Duplicate key 'display'.","ObjectExpression","unexpected",["52"],["53"],"no-global-assign","no-unsafe-negation"]